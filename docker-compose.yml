services:
  mysql_db:
    image: mysql
    restart: always
    privileged: true
    # Just for testing - need proper .env file usage in the future. Can reference .env files in yml using ${VAR_NAME}
    environment:
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - 3306:3306
    volumes:
      # Stores the database files on the host machine to persist changes
      - mysql_data:/var/lib/mysql
      # SQL files in this directory will execute on container start
      - ./mysql_init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  django_backend:
    build: ./src/backend
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./src/backend:/app
      - ./.env:/app/.env
    ports:
      - 8000:8000
    depends_on:
      mysql_db:
        condition: service_healthy
    environment:
      DATABASE_URL: mysql://root:root@mysql_db/main

  svelte_frontend:
    build: ./src/frontend
    volumes:
      # By mounting - /usr/app/frontend/node_modules in Docker Compose, you instructed Docker to treat node_modules as a container-specific directory,
      # keeping it independent from your host environment. This way, you can avoid potential conflicts between the host and container dependencies.
      # (Solution found on GitHub), wouldn't work causing dependency issues on Windows without mounting node_modules separately.
      - ./src/frontend:/usr/app/frontend - /usr/app/frontend/node_modules
    ports:
      - 4173:4173
    depends_on:
      - django_backend

#  Volume to be created on local machine. This will store the database files - placement handled by Docker
volumes:
  mysql_data:
    driver: local
